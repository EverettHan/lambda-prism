// COPYRIGHT DASSAULT SYSTEMES 2009

#ifndef WebLogonPanel_H
#define WebLogonPanel_H

#include "CATMutex.h"
#include "CATSysMTGlobalMutex.h"
#include "DSYString.h"
#include "CATSysTSUnicodeString.h"

/************************************************************************/
/* Defines                                                              */
/************************************************************************/
#if defined(__DSYSysDlg)
# define ExportedByDSYSysDlg  DSYExport
#else  // __DSYSysDlg
# define ExportedByDSYSysDlg  DSYImport
#endif // __DSYSysDlg

/************************************************************************/
/* Local includes                                                       */
/************************************************************************/
#include "DSYExport.h"

typedef struct LoginInfo
{
	char	*UserName;
	char	*Password;
	char	*Ev6UserName;
	char	*Ev6Password;
	char	*Ev6Url;
	char	*FinalUrl;
	char	*Cookies;
} S_LoginInfo;

// Calling this service of param extend the usage of the CASTGC and 
// Also prevent Passport default redirection, which is set to the last redirected service, by specifying the service GetCASLoginServiceParam (provided by Passport team).
// Indeed, if the last cached service does not return a Web page (but JSON for e.g.), the WebControl would display a download box...
inline CATUnicodeString GetCASLoginServiceParam()
{
	return "service=V6";
};

void ExportedByDSYSysDlg SetLoginPanelAvailability(bool iIsPanelActivated);

// WebLogonPanel dialog
class ExportedByDSYSysDlg WebLogonPanel
{
public:
	WebLogonPanel(bool iShouldHidePanel = true);
	~WebLogonPanel();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////// Generic operation /////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//iIsUINeeded == true : all API will display a UI to logon on passport if needed
	//iIsUINeeded == false: all will return an error if passport session and service session are lost
	HRESULT						SetUIMode(bool iIsUINeeded);

	//API to display an error in the html dialog.
	//if parameter iMsgCatalog and iMsgId are given GetNLSMessage will be retreive from nls catalog
	//if iNlsMsg is given will display the string
	//priority is given to parameter iMsgCatalog and iMsgId
	HRESULT						DisplayError(CATUnicodeString iMsgCatalog, CATUnicodeString iMsgId, CATUnicodeString iNlsMsg);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////// Generic operation /////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////// Fonctions for CAS login (Cloud only) ///////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	S_LoginInfo*				GetCredential(const char *iUrl, const char *iUserName = NULL, const char *iPassword = NULL, char *iComment = NULL);
	HRESULT						LoginCas(const char *iUrl, const char *iUserName = NULL, const char *iPassword = NULL, char *iComment = NULL);
	HRESULT						LogoutCas(const char *iUrl);
//	HRESULT						LoginCas(CATUnicodeString iUrl, const char *iUserName = NULL, const char *iPassword = NULL, char *iComment = NULL);
	HRESULT						CasReauthenticate(const char *iUrl = NULL, const char *iUserName = NULL, const char *iPassword = NULL);
	static char					*GetCASUrl();
	char						*GetCASLoginUrl();
	char						*GetCASLogoutUrl();
	HRESULT						ValidateTicket(const char *iService, char *iCasTicket, char **oUsername);
	HRESULT						ValidateTicket(const char *iService, CATUnicodeString &iCasTicket, CATUnicodeString &oUsername);
    HRESULT						GetProxyTicket(const char *iService, CATUnicodeString	&oCasTicket);
	HRESULT						GetTransientCASTGC(const CATUnicodeString& iService, CATUnicodeString	&oUrlToValidateTransientCASTGC, const CATUnicodeString& i3DPassportUrl = "");
    // @deprecated R417
	HRESULT						GetProxyTicket(const char *iService, CATSysTSUnicodeString	&oCasTicket);
	HRESULT						GetProxyTicket(const char *iService, char **oCasTicket);
    HRESULT						GetServiceTicket(const char *iService, CATUnicodeString	&oCasTicket);
	// @deprecated R417
    HRESULT						GetServiceTicket(const char *iService, CATSysTSUnicodeString	&oCasTicket);
	HRESULT						GetServiceTicket(const char *iService, char **oCasTicket);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////         Fonctions For Matrix     /////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	HRESULT						SetSecurityContextMatrix(const char *iUrl, char *iComment = NULL, bool iIs3DSpaceRootUrl = true);
	HRESULT						LoginMatrix(const char *iUrl, const char *iUserName = NULL, const char *iPassword = NULL, const char *iPlatform = NULL, const char *oCredential = NULL, char *iComment = NULL);
	HRESULT						LoginForLogoutMatrix(const char *iUrl, const char *iUserName = NULL, const char *iPassword = NULL, const char *oCredential = NULL);
	HRESULT						LoginAfterLogoutMatrix(const char *iUrl, const char *iUserName = NULL, const char *iPassword = NULL, const char *oCredential = NULL);
	HRESULT						LoginMatrixGetUserName(char *oUserName);
	HRESULT						LoginMatrixGetUserName(CATUnicodeString &oUserName);
	HRESULT						LoginMatrixGetUserPassword(char *oUserPassword);
	HRESULT						LoginMatrixGetUserPassword(CATUnicodeString &oUserPassword);
	HRESULT						LogoutMatrix(const char *iUrl);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////// Fonction Generic login //////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	HRESULT						LoginGeneric(const char *iUrl, const char *iUserName, char *iComment = NULL);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	HRESULT						SetSecurityContextMatrixWithCTX(const char *iUrl, char *iComment=NULL);
	HRESULT						SetPasswordRequired(bool iIsPasswordRequired);

	bool						_LogonDone;
	CATUnicodeString			_MatrixUserName;
	CATUnicodeString			_MatrixUserPassword;

protected:
	S_LoginInfo*				InitDialogBox(const char *iUrl, const char *iUserName, const char *iPassword);
	HRESULT						Init();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////// Fonction For cookie bug /////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	HRESULT						CreateSystemWindow(const char *iUrl, char *iComment);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	HRESULT						CredentialsUpdate();

	bool						_IsPasswordNeeded;
	bool						_ShouldHidePanel;
	bool						_IsUINeeded;
};

#endif //WebLogonPanel_H
